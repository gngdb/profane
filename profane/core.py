# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['foo', 'ProfaneTeardownStage', 'ProfaneTeardownHook', 'init', 'parse_output_log']

# %% ../nbs/00_core.ipynb 3
def foo(): pass

# %% ../nbs/00_core.ipynb 4
import wandb
from typing import Callable, NamedTuple
from enum import IntEnum

class ProfaneTeardownStage(IntEnum):
    EARLY = 1
    LATE = 2

class ProfaneTeardownHook(NamedTuple):
    call: Callable[[], None]
    stage: ProfaneTeardownStage

def init(**kwargs):
    """
    A wrapper for `wandb.init`.
    """
    kwargs['mode'] = 'offline'
    run = wandb.init(**kwargs) # always offline
    run._teardown_hooks.append(ProfaneTeardownHook(lambda: print("hook executed"), ProfaneTeardownStage.LATE))
    return run

# %% ../nbs/00_core.ipynb 5
from wandb.proto import wandb_internal_pb2
from wandb.sdk.internal import datastore


def parse_output_log(data_path):
    """
    Parse wandb data from a given path.
    Returns the terminal log typically saved as `output.log`,
    which isn't created unless you're running in online mode.
    But, the data still exists in the `.wandb` file.
    """
    # https://github.com/wandb/wandb/issues/1768#issuecomment-976786476 
    ds = datastore.DataStore()
    ds.open_for_scan(data_path)
    terminal_log = []

    data = ds.scan_record()
    while data is not None:
        pb = wandb_internal_pb2.Record()
        pb.ParseFromString(data[1])  
        record_type = pb.WhichOneof("record_type")
        if record_type == "output_raw":
            terminal_log.append(pb.output_raw.line)
            #print(pb.output_raw)
        data = ds.scan_record()
    return "".join(terminal_log)
